import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import pyodbc
from datetime import datetime
import csv
import logging

from utils import str_to_set, set_to_str
from x_plus import calculate_xplus
from key_finder import find_k1, find_k2, find_k3, find_all_keys, find_ks1, find_ks2, find_ks3,find_ks4, find_ks5, find_ks6
from fc_generator import find_f1, find_f2, find_f3
from db import insert_log, get_all_logs, delete_log, get_combined_logs, get_connection

class KeyFindingApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("·ª®ng d·ª•ng t√¨m kh√≥a l∆∞·ª£c ƒë·ªì quan h·ªá")
        self.geometry("850x600")
        self.configure(bg="#f5f5f5")
        
        self.u_set = set()
        self.f_list = []

        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.style.configure("TLabel", font=("Arial", 11), background="#f5f5f5", foreground="#333333")
        self.style.configure("TButton", font=("Arial", 10), padding=6, background="#4CAF50", foreground="white")
        self.style.map("TButton", background=[('active', '#45a049')], foreground=[('active', '#ffffff')])
        self.style.configure("TEntry", font=("Arial", 11), padding=4)
        self.style.configure("TLabelframe", font=("Arial", 11, "bold"), background="#f5f5f5")
        self.style.configure("TLabelframe.Label", background="#f5f5f5", foreground="#333333")
        self.style.configure("TNotebook", background="#e0e0e0")
        self.style.configure("TNotebook.Tab", font=("Arial", 10), padding=[8, 4])
        self.style.configure("Treeview", font=("Arial", 10))
        self.style.configure("Treeview.Heading", font=("Arial", 10, "bold"))
        self.style.map("Treeview", background=[('selected', '#d0e8ff')])

        self.create_menu()
        self.create_main_interface()

    def create_menu(self):
        menu_bar = tk.Menu(self, bg="#4CAF50", fg="white", activebackground="#45a049", activeforeground="white")
        self.config(menu=menu_bar)
        
        file_menu = tk.Menu(menu_bar, tearoff=0, bg="white", fg="black")
        menu_bar.add_cascade(label="üìÅ File", menu=file_menu)
        file_menu.add_command(label="üÜï M·ªõi", command=lambda: self.reset_data())
        file_menu.add_separator()
        file_menu.add_command(label="üö™ Tho√°t", command=self.quit)
        
        tools_menu = tk.Menu(menu_bar, tearoff=0, bg="white", fg="black")
        menu_bar.add_cascade(label="üõ† C√¥ng c·ª•", menu=tools_menu)
        tools_menu.add_command(label="üìú Xem l·ªãch s·ª≠", command=self.show_history)
        tools_menu.add_command(label="üîó K·∫øt n·ªëi CSDL", command=self.test_db_connection)
        
        help_menu = tk.Menu(menu_bar, tearoff=0, bg="white", fg="black")
        menu_bar.add_cascade(label="‚ùì Tr·ª£ gi√∫p", menu=help_menu)
        help_menu.add_command(label="üìñ H∆∞·ªõng d·∫´n", command=self.show_help)
        help_menu.add_command(label="‚Ñπ Gi·ªõi thi·ªáu", command=self.show_about)

    def create_main_interface(self):
        main_frame = ttk.Frame(self, padding=8, style="Main.TFrame")
        main_frame.pack(fill="both", expand=True)
        self.style.configure("Main.TFrame", background="#f5f5f5")

        panel1 = ttk.LabelFrame(main_frame, text="üåå T·∫≠p thu·ªôc t√≠nh v≈© tr·ª•", padding=8)
        panel1.pack(fill="x", padx=8, pady=8)

        ttk.Label(panel1, text="Nh·∫≠p U =", font=("Arial", 11, "bold")).grid(row=0, column=0, sticky="w", padx=8, pady=4)
        self.txtU = ttk.Entry(panel1, font=("Arial", 11), width=35)
        self.txtU.grid(row=0, column=1, sticky="ew", padx=8, pady=4)
        self.txtU.bind("<KeyRelease>", self.on_u_change)
        
        ttk.Label(panel1, text="U =", font=("Arial", 11, "bold")).grid(row=1, column=0, sticky="w", padx=8, pady=4)
        self.txtUDisplay = ttk.Entry(panel1, font=("Arial", 11), state="readonly", width=35)
        self.txtUDisplay.grid(row=1, column=1, sticky="ew", padx=8, pady=4)

        self.tabControl = ttk.Notebook(main_frame)
        self.tab1 = ttk.Frame(self.tabControl)
        self.tab2 = ttk.Frame(self.tabControl)
        self.tab3 = ttk.Frame(self.tabControl)

        self.tabControl.add(self.tab1, text='üì• T√¨m X+')
        self.tabControl.add(self.tab2, text='üîë T√¨m Kh√≥a')
        self.tabControl.add(self.tab3, text='üìä T√¨m Fc')
        self.tabControl.pack(expand=1, fill="both", padx=8, pady=8)

        self.init_tab1(self.tab1)
        self.init_tab2(self.tab2)
        self.init_tab3(self.tab3)

        self.btnSaveToDB = ttk.Button(main_frame, text="üíæ L∆∞u v√†o SQL Server", command=self.log_to_db, style="Accent.TButton")
        self.btnSaveToDB.pack(pady=8)
        self.style.configure("Accent.TButton", background="#2196F3", font=("Arial", 10, "bold"))
        self.style.map("Accent.TButton", background=[('active', '#1976D2')])

        self.status_var = tk.StringVar()
        self.status_var.set("‚úÖ S·∫µn s√†ng")
        self.status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W, background="#e0e0e0", padding=4)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)

    def on_u_change(self, event=None):
        u_str = self.txtU.get().strip()
        self.u_set = str_to_set(u_str)

        self.txtUDisplay.config(state="normal")
        self.txtUDisplay.delete(0, tk.END)
        self.txtUDisplay.insert(0, set_to_str(self.u_set))
        self.txtUDisplay.config(state="readonly")

    def init_tab1(self, parent):
        input_frame = ttk.LabelFrame(parent, text="‚ûï Nh·∫≠p ph·ª• thu·ªôc h√†m", padding=8)
        input_frame.pack(fill="x", padx=8, pady=8)
        
        ttk.Label(input_frame, text="X =", font=("Arial", 11, "bold")).grid(row=0, column=0, padx=8, pady=4)
        self.txtX = ttk.Entry(input_frame, font=("Arial", 11), width=18)
        self.txtX.grid(row=0, column=1, padx=8, pady=4)
        
        ttk.Label(input_frame, text="Y =", font=("Arial", 11, "bold")).grid(row=0, column=2, padx=8, pady=4)
        self.txtY = ttk.Entry(input_frame, font=("Arial", 11), width=18)
        self.txtY.grid(row=0, column=3, padx=8, pady=4)
        
        self.btnAddRelation = ttk.Button(input_frame, text="‚ûï Th√™m F", command=self.on_add_relation)
        self.btnAddRelation.grid(row=0, column=4, padx=8, pady=4)

        f_display_frame = ttk.LabelFrame(parent, text="üìã T·∫≠p ph·ª• thu·ªôc h√†m F", padding=8)
        f_display_frame.pack(fill="both", expand=True, padx=8, pady=8)

        text_frame = ttk.Frame(f_display_frame)
        text_frame.pack(fill="both", expand=True, padx=5, pady=5)

        self.txtF = tk.Text(text_frame, font=("Arial", 11), height=12, width=50, bg="#ffffff", relief="flat", borderwidth=1)
        
        scrollbar_y = ttk.Scrollbar(text_frame, orient="vertical", command=self.txtF.yview)
        scrollbar_y.pack(side="right", fill="y")
        
        self.txtF.pack(fill="both", expand=True)
        self.txtF.config(yscrollcommand=scrollbar_y.set)

        xplus_frame = ttk.LabelFrame(parent, text="üîç T√¨m X+", padding=8)
        xplus_frame.pack(fill="x", padx=8, pady=8)

        ttk.Label(xplus_frame, text="Nh·∫≠p X =", font=("Arial", 11, "bold")).grid(row=0, column=0, padx=8, pady=4)
        self.txtFindX = ttk.Entry(xplus_frame, font=("Arial", 11), width=18)
        self.txtFindX.grid(row=0, column=1, padx=8, pady=4)

        ttk.Label(xplus_frame, text="X+ =", font=("Arial", 11, "bold")).grid(row=0, column=2, padx=8, pady=4)
        self.txtXPlus = ttk.Entry(xplus_frame, font=("Arial", 11), width=25, state="readonly")
        self.txtXPlus.grid(row=0, column=3, padx=8, pady=4)

        self.btnFindXPlus = ttk.Button(xplus_frame, text="üîé T√¨m X+", command=self.on_find_xplus)
        self.btnFindXPlus.grid(row=0, column=4, padx=8, pady=4)

    def init_tab2(self, parent):
        keys_frame = ttk.LabelFrame(parent, text="üîë T√¨m c√°c kh√≥a", padding=8)
        keys_frame.pack(fill="both", expand=True, padx=8, pady=8)

        ttk.Label(keys_frame, text="K1 =", font=("Arial", 11, "bold")).grid(row=0, column=0, padx=8, pady=6, sticky="w")
        self.txtK1 = ttk.Entry(keys_frame, font=("Arial", 11), width=35, state="readonly")
        self.txtK1.grid(row=0, column=1, padx=8, pady=6)
        ttk.Button(keys_frame, text="üîç T√¨m K1", command=self.on_find_k1).grid(row=0, column=2, padx=8, pady=6)

        ttk.Label(keys_frame, text="K2 =", font=("Arial", 11, "bold")).grid(row=1, column=0, padx=8, pady=6, sticky="w")
        self.txtK2 = ttk.Entry(keys_frame, font=("Arial", 11), width=35, state="readonly")
        self.txtK2.grid(row=1, column=1, padx=8, pady=6)
        ttk.Button(keys_frame, text="üîç T√¨m K2", command=self.on_find_k2).grid(row=1, column=2, padx=8, pady=6)

        ttk.Label(keys_frame, text="K3 =", font=("Arial", 11, "bold")).grid(row=2, column=0, padx=8, pady=6, sticky="w")
        self.txtK3 = ttk.Entry(keys_frame, font=("Arial", 11), width=35, state="readonly")
        self.txtK3.grid(row=2, column=1, padx=8, pady=6)
        ttk.Button(keys_frame, text="üîç T√¨m K3", command=self.on_find_k3).grid(row=2, column=2, padx=8, pady=6)

        ttk.Label(keys_frame, text="KS1 =", font=("Arial", 11, "bold")).grid(row=3, column=0, padx=8, pady=6, sticky="w")
        self.txtKS1 = ttk.Entry(keys_frame, font=("Arial", 11), width=35, state="readonly")
        self.txtKS1.grid(row=3, column=1, padx=8, pady=6)
        ttk.Button(keys_frame, text="üîç T√¨m KS1", command=self.on_find_ks1).grid(row=3, column=2, padx=8, pady=6)

        ttk.Label(keys_frame, text="KS2 =", font=("Arial", 11, "bold")).grid(row=4, column=0, padx=8, pady=6, sticky="w")
        self.txtKS2 = ttk.Entry(keys_frame, font=("Arial", 11), width=35, state="readonly")
        self.txtKS2.grid(row=4, column=1, padx=8, pady=6)
        ttk.Button(keys_frame, text="üîç T√¨m KS2", command=self.on_find_ks2).grid(row=4, column=2, padx=8, pady=6)

        ttk.Label(keys_frame, text="KS3 =", font=("Arial", 11, "bold")).grid(row=5, column=0, padx=8, pady=6, sticky="w")
        self.txtKS3 = ttk.Entry(keys_frame, font=("Arial", 11), width=35, state="readonly")
        self.txtKS3.grid(row=5, column=1, padx=8, pady=6)
        ttk.Button(keys_frame, text="üîç T√¨m KS3", command=self.on_find_ks3).grid(row=5, column=2, padx=8, pady=6)

        ttk.Label(keys_frame, text="KS4 =", font=("Arial", 11, "bold")).grid(row=6, column=0, padx=8, pady=6, sticky="w")
        self.txtKS4 = ttk.Entry(keys_frame, font=("Arial", 11), width=35, state="readonly")
        self.txtKS4.grid(row=6, column=1, padx=8, pady=6)
        ttk.Button(keys_frame, text="üîç T√¨m KS4", command=self.on_find_ks4).grid(row=6, column=2, padx=8, pady=6)

        ttk.Label(keys_frame, text="KS5 =", font=("Arial", 11, "bold")).grid(row=7, column=0, padx=8, pady=6, sticky="w")
        self.txtKS5 = ttk.Entry(keys_frame, font=("Arial", 11), width=35, state="readonly")
        self.txtKS5.grid(row=7, column=1, padx=8, pady=6)
        ttk.Button(keys_frame, text="üîç T√¨m KS5", command=self.on_find_ks5).grid(row=7, column=2, padx=8, pady=6)

        ttk.Label(keys_frame, text="KS6 =", font=("Arial", 11, "bold")).grid(row=8, column=0, padx=8, pady=6, sticky="w")
        self.txtKS6 = ttk.Entry(keys_frame, font=("Arial", 11), width=35, state="readonly")
        self.txtKS6.grid(row=8, column=1, padx=8, pady=6)
        ttk.Button(keys_frame, text="üîç T√¨m KS6", command=self.on_find_ks6).grid(row=8, column=2, padx=8, pady=6)

    def init_tab3(self, parent):
        fc_frame = ttk.LabelFrame(parent, text="üìä T·∫≠p ph·ª• thu·ªôc h√†m t·ªëi thi·ªÉu", padding=8)
        fc_frame.pack(fill="both", expand=True, padx=8, pady=8)

        ttk.Label(fc_frame, text="F1 =", font=("Arial", 11, "bold")).grid(row=0, column=0, sticky="nw", padx=8, pady=6)
        text_frame_f1 = ttk.Frame(fc_frame)
        text_frame_f1.grid(row=0, column=1, padx=8, pady=6, sticky="ew")
        
        self.txtF1 = tk.Text(text_frame_f1, font=("Arial", 11), height=4, width=50, bg="#ffffff", relief="flat", borderwidth=1)
        scrollbar_y_f1 = ttk.Scrollbar(text_frame_f1, orient="vertical", command=self.txtF1.yview)
        scrollbar_y_f1.pack(side="right", fill="y")
        self.txtF1.pack(fill="both", expand=True)
        self.txtF1.config(yscrollcommand=scrollbar_y_f1.set)
        
        ttk.Button(fc_frame, text="üîç T√¨m F1", command=self.on_find_f1).grid(row=0, column=2, padx=8, pady=6)

        ttk.Label(fc_frame, text="F2 =", font=("Arial", 11, "bold")).grid(row=1, column=0, sticky="nw", padx=8, pady=6)
        text_frame_f2 = ttk.Frame(fc_frame)
        text_frame_f2.grid(row=1, column=1, padx=8, pady=6, sticky="ew")
        
        self.txtF2 = tk.Text(text_frame_f2, font=("Arial", 11), height=4, width=50, bg="#ffffff", relief="flat", borderwidth=1)
        scrollbar_y_f2 = ttk.Scrollbar(text_frame_f2, orient="vertical", command=self.txtF2.yview)
        scrollbar_y_f2.pack(side="right", fill="y")
        self.txtF2.pack(fill="both", expand=True)
        self.txtF2.config(yscrollcommand=scrollbar_y_f2.set)
        
        ttk.Button(fc_frame, text="üîç T√¨m F2", command=self.on_find_f2).grid(row=1, column=2, padx=8, pady=6)

        ttk.Label(fc_frame, text="F3 =", font=("Arial", 11, "bold")).grid(row=2, column=0, sticky="nw", padx=8, pady=6)
        text_frame_f3 = ttk.Frame(fc_frame)
        text_frame_f3.grid(row=2, column=1, padx=8, pady=6, sticky="ew")
        
        self.txtF3 = tk.Text(text_frame_f3, font=("Arial", 11), height=4, width=50, bg="#ffffff", relief="flat", borderwidth=1)
        scrollbar_y_f3 = ttk.Scrollbar(text_frame_f3, orient="vertical", command=self.txtF3.yview)
        scrollbar_y_f3.pack(side="right", fill="y")
        self.txtF3.pack(fill="both", expand=True)
        self.txtF3.config(yscrollcommand=scrollbar_y_f3.set)
        
        ttk.Button(fc_frame, text="üîç T√¨m F3", command=self.on_find_f3).grid(row=2, column=2, padx=8, pady=6)

    def on_add_relation(self):
        x_str = self.txtX.get().strip()
        y_str = self.txtY.get().strip()

        if not x_str or not y_str:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß X v√† Y")
            return
        
        x_set = str_to_set(x_str)
        y_set = str_to_set(y_str)

        if not x_set.issubset(self.u_set) or not y_set.issubset(self.u_set):
            messagebox.showwarning("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", 
                                "X v√† Y ph·∫£i l√† t·∫≠p con c·ªßa U")
            return
        
        self.f_list.append((x_set, y_set))

        self.txtF.insert(tk.END, f"{set_to_str(x_set)} ‚Üí {set_to_str(y_set)}\n")

        self.txtX.delete(0, tk.END)
        self.txtY.delete(0, tk.END)

        self.status_var.set(f"‚úÖ ƒê√£ th√™m ph·ª• thu·ªôc h√†m: {set_to_str(x_set)} ‚Üí {set_to_str(y_set)}")
        
    def on_find_xplus(self):
        if not self.u_set:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U tr∆∞·ªõc")
            return
        
        if not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p F tr∆∞·ªõc")
            return
        
        x_str = self.txtFindX.get().strip()
        if not x_str:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p X ƒë·ªÉ t√¨m X+")
            return
        
        x_set = str_to_set(x_str)
    
        if not x_set.issubset(self.u_set):
            messagebox.showwarning("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", "X ph·∫£i l√† t·∫≠p con c·ªßa U")
            return
        
        xplus = calculate_xplus(x_set, self.f_list, self.u_set)
    
        self.txtXPlus.config(state="normal")
        self.txtXPlus.delete(0, tk.END)
        self.txtXPlus.insert(0, set_to_str(xplus))
        self.txtXPlus.config(state="readonly")
    
        self.status_var.set(f"‚úÖ X+ c·ªßa {set_to_str(x_set)} l√† {set_to_str(xplus)}")

    def on_find_k1(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F.")
            return
        k1 = find_k1(self.u_set, self.f_list)
        self.txtK1.config(state="normal")
        self.txtK1.delete(0, tk.END)
        self.txtK1.insert(0, set_to_str(k1))
        self.txtK1.config(state="readonly")
        self.status_var.set("‚úÖ ƒê√£ t√¨m K1 th√†nh c√¥ng")

    def on_find_k2(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F.")
            return
        k2 = find_k2(self.u_set, self.f_list)
        self.txtK2.config(state="normal")
        self.txtK2.delete(0, tk.END)
        self.txtK2.insert(0, set_to_str(k2))
        self.txtK2.config(state="readonly")
        self.status_var.set("‚úÖ ƒê√£ t√¨m K2 th√†nh c√¥ng")

    def on_find_k3(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F.")
            return
        k3 = find_k3(self.u_set, self.f_list)
        self.txtK3.config(state="normal")
        self.txtK3.delete(0, tk.END)
        self.txtK3.insert(0, set_to_str(k3))
        self.txtK3.config(state="readonly")
        self.status_var.set("‚úÖ ƒê√£ t√¨m K3 th√†nh c√¥ng")

    def on_find_ks1(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F.")
            return
        
        # Calculate the new KS1 value
        new_ks1 = find_ks1(self.u_set, self.f_list)
        if not new_ks1:
            self.status_var.set("‚ùå Kh√¥ng t√¨m th·∫•y KS1")
            return

        # Get the current KS1 value from the Entry widget
        self.txtKS1.config(state="normal")
        current_ks1 = self.txtKS1.get().strip()
        
        # Combine current and new KS1 values, avoiding duplicates
        if current_ks1:
            # Split current KS1 into a set to remove duplicates
            current_keys = set(current_ks1.split(';')) if current_ks1 else set()
            new_keys = set(new_ks1.split(';'))
            # Update the set with new keys
            combined_keys = current_keys.union(new_keys)
            # Convert back to a semicolon-separated string
            updated_ks1 = ';'.join(sorted(combined_keys))
        else:
            updated_ks1 = new_ks1

        # Update the Entry widget with the combined value
        self.txtKS1.delete(0, tk.END)
        self.txtKS1.insert(0, updated_ks1)
        self.txtKS1.config(state="readonly")
        self.status_var.set("‚úÖ ƒê√£ t√¨m v√† c·∫≠p nh·∫≠t KS1 th√†nh c√¥ng")

    def on_find_ks2(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F.")
            return
        
        new_ks2 = find_ks2(self.u_set, self.f_list)
        if not new_ks2:
            self.status_var.set("‚ùå Kh√¥ng t√¨m th·∫•y KS2")
            return

        self.txtKS2.config(state="normal")
        current_ks2 = self.txtKS2.get().strip()
        
        if current_ks2:
            current_keys = set(current_ks2.split(';')) if current_ks2 else set()
            new_keys = set(new_ks2.split(';'))
            combined_keys = current_keys.union(new_keys)
            updated_ks2 = ';'.join(sorted(combined_keys))
        else:
            updated_ks2 = new_ks2

        self.txtKS2.delete(0, tk.END)
        self.txtKS2.insert(0, updated_ks2)
        self.txtKS2.config(state="readonly")
        self.status_var.set("‚úÖ ƒê√£ t√¨m v√† c·∫≠p nh·∫≠t KS2 th√†nh c√¥ng")

    def on_find_ks3(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F.")
            return
        
        new_ks3 = find_ks3(self.u_set, self.f_list)
        if not new_ks3:
            self.status_var.set("‚ùå Kh√¥ng t√¨m th·∫•y KS3")
            return

        self.txtKS3.config(state="normal")
        current_ks3 = self.txtKS3.get().strip()
        
        if current_ks3:
            current_keys = set(current_ks3.split(';')) if current_ks3 else set()
            new_keys = set(new_ks3.split(';'))
            combined_keys = current_keys.union(new_keys)
            updated_ks3 = ';'.join(sorted(combined_keys))
        else:
            updated_ks3 = new_ks3

        self.txtKS3.delete(0, tk.END)
        self.txtKS3.insert(0, updated_ks3)
        self.txtKS3.config(state="readonly")
        self.status_var.set("‚úÖ ƒê√£ t√¨m v√† c·∫≠p nh·∫≠t KS3 th√†nh c√¥ng")

    def on_find_ks4(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F.")
            return
        
        new_ks4 = find_ks4(self.u_set, self.f_list)
        if not new_ks4:
            self.status_var.set("‚ùå Kh√¥ng t√¨m th·∫•y KS4")
            return

        self.txtKS4.config(state="normal")
        current_ks4 = self.txtKS4.get().strip()
        
        if current_ks4:
            current_keys = set(current_ks4.split(';')) if current_ks4 else set()
            new_keys = set(new_ks4.split(';'))
            combined_keys = current_keys.union(new_keys)
            updated_ks4 = ';'.join(sorted(combined_keys))
        else:
            updated_ks4 = new_ks4

        self.txtKS4.delete(0, tk.END)
        self.txtKS4.insert(0, updated_ks4)
        self.txtKS4.config(state="readonly")
        self.status_var.set("‚úÖ ƒê√£ t√¨m v√† c·∫≠p nh·∫≠t KS4 th√†nh c√¥ng")

    def on_find_ks5(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F.")
            return
        
        new_ks5 = find_ks5(self.u_set, self.f_list)
        if not new_ks5:
            self.status_var.set("‚ùå Kh√¥ng t√¨m th·∫•y KS5")
            return

        self.txtKS5.config(state="normal")
        current_ks5 = self.txtKS5.get().strip()
        
        if current_ks5:
            current_keys = set(current_ks5.split(';')) if current_ks5 else set()
            new_keys = set(new_ks5.split(';'))
            combined_keys = current_keys.union(new_keys)
            updated_ks5 = ';'.join(sorted(combined_keys))
        else:
            updated_ks5 = new_ks5

        self.txtKS5.delete(0, tk.END)
        self.txtKS5.insert(0, updated_ks5)
        self.txtKS5.config(state="readonly")
        self.status_var.set("‚úÖ ƒê√£ t√¨m v√† c·∫≠p nh·∫≠t KS5 th√†nh c√¥ng")

    def on_find_ks6(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F.")
            return
        
        new_ks6 = find_ks6(self.u_set, self.f_list)
        if not new_ks6:
            self.status_var.set("‚ùå Kh√¥ng t√¨m th·∫•y KS6")
            return

        self.txtKS6.config(state="normal")
        current_ks6 = self.txtKS6.get().strip()
        
        if current_ks6:
            current_keys = set(current_ks6.split(';')) if current_ks6 else set()
            new_keys = set(new_ks6.split(';'))
            combined_keys = current_keys.union(new_keys)
            updated_ks6 = ';'.join(sorted(combined_keys))
        else:
            updated_ks6 = new_ks6

        self.txtKS6.delete(0, tk.END)
        self.txtKS6.insert(0, updated_ks6)
        self.txtKS6.config(state="readonly")
        self.status_var.set("‚úÖ ƒê√£ t√¨m v√† c·∫≠p nh·∫≠t KS6 th√†nh c√¥ng")

    def on_find_f1(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F")
            return
        
        f1 = find_f1(self.f_list)
    
        self.txtF1.delete(1.0, tk.END)
        for vt, vp in f1:
            self.txtF1.insert(tk.END, f"{set_to_str(vt)} ‚Üí {set_to_str(vp)}\n")
        
        self.status_var.set("‚úÖ ƒê√£ t√¨m F1 th√†nh c√¥ng")

    def on_find_f2(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F")
            return
        
        f2 = find_f2(self.f_list, self.u_set)
    
        self.txtF2.delete(1.0, tk.END)
        for vt, vp in f2:
            self.txtF2.insert(tk.END, f"{set_to_str(vt)} ‚Üí {set_to_str(vp)}\n")
        
        self.status_var.set("‚úÖ ƒê√£ t√¨m F2 th√†nh c√¥ng")

    def on_find_f3(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F")
            return
        
        f3 = find_f3(self.f_list, self.u_set)
    
        self.txtF3.delete(1.0, tk.END)
        for vt, vp in f3:
            self.txtF3.insert(tk.END, f"{set_to_str(vt)} ‚Üí {set_to_str(vp)}\n")
        
        self.status_var.set("‚úÖ ƒê√£ t√¨m F3 th√†nh c√¥ng")

    def find_all_keys_ui(self):
        if not self.u_set or not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p U v√† F")
            return
        
        keys = find_all_keys(self.u_set, self.f_list)
    
        if keys:
            result = "C√°c kh√≥a t√¨m th·∫•y:\n\n"
            for i, key in enumerate(keys, 1):
                result += f"{i}. {set_to_str(key)}\n"
        else:
            result = "Kh√¥ng t√¨m th·∫•y kh√≥a n√†o"
        
        messagebox.showinfo("T·∫•t c·∫£ c√°c kh√≥a", result)
        self.status_var.set(f"‚úÖ ƒê√£ t√¨m th·∫•y {len(keys)} kh√≥a")

    def log_to_db(self):
        if not self.u_set:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p thu·ªôc t√≠nh U")
            return

        if not self.f_list:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p t·∫≠p ph·ª• thu·ªôc h√†m F")
            return

        data = {
            'u_set': set_to_str(self.u_set),
            'f_list': '\n'.join([f"{set_to_str(vt)} ‚Üí {set_to_str(vp)}" for vt, vp in self.f_list]),
            'x_input': self.txtFindX.get().strip() or None,
            'x_plus': self.txtXPlus.get().strip() or None,
            'k1': self.txtK1.get().strip() or None,
            'k2': self.txtK2.get().strip() or None,
            'k3': self.txtK3.get().strip() or None,
            'ks1': self.txtKS1.get().strip() or None,
            'ks2': self.txtKS2.get().strip() or None,
            'ks3': self.txtKS3.get().strip() or None,
            'ks4': self.txtKS4.get().strip() or None,
            'ks5': self.txtKS5.get().strip() or None,
            'ks6': self.txtKS6.get().strip() or None,
            'f1': self.txtF1.get("1.0", "end").strip() or None,
            'f2': self.txtF2.get("1.0", "end").strip() or None,
            'f3': self.txtF3.get("1.0", "end").strip() or None,
        }

        try:
            insert_log(data)
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u d·ªØ li·ªáu v√†o SQL Server")
            self.status_var.set("‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o c∆° s·ªü d·ªØ li·ªáu")
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi l∆∞u d·ªØ li·ªáu: {e}")
            self.status_var.set("‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu")

    def show_history(self):
        try:
            logs = get_combined_logs()
            if not logs:
                messagebox.showinfo("L·ªãch s·ª≠", "Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠.")
                return

            # Sort logs by created_at in descending order
            logs.sort(key=lambda x: x['created_at'], reverse=True)

            history_window = tk.Toplevel(self)
            history_window.title("üìú L·ªãch s·ª≠")
            history_window.geometry("1200x550")
            history_window.configure(bg="#f5f5f5")

            # Include schema_log_id in columns
            columns = ("created_at", "schema_log_id", "u_set", "f_list", "x_input", "x_plus", "k1", "k2", "k3", "ks1","ks2", "ks3", "ks4", "ks5", "ks6","f1", "f2", "f3")
            self.tree = ttk.Treeview(history_window, columns=columns, show='headings', selectmode='browse')

            column_widths = {
                "created_at": 140,
                "schema_log_id": 100,
                "u_set": 90,
                "f_list": 180,
                "x_input": 90,
                "x_plus": 90,
                "k1": 90,
                "k2": 90,
                "k3": 90,
                "ks1": 140,
                "ks2": 140,
                "ks3": 140,
                "ks4": 140,
                "ks5": 140,
                "ks6": 140,
                "f1": 180,
                "f2": 180,
                "f3": 180
            }
            for col in columns:
                header = col.upper().replace('_', ' ')
                self.tree.heading(col, text=header)
                self.tree.column(col, anchor="center", width=column_widths[col])

            self.tree.tag_configure('oddrow', background='#f0f0f0')
            self.tree.tag_configure('evenrow', background='#ffffff')

            # Store logs with their Treeview IDs for easier lookup
            self.log_map = {}
            for i, log in enumerate(logs):
                tag = 'oddrow' if i % 2 else 'evenrow'
                created_at_str = log['created_at'].strftime("%Y-%m-%d %H:%M:%S")
                item_id = self.tree.insert("", "end", values=(
                    created_at_str,
                    log.get('schema_log_id', ''),  # Include schema_log_id
                    log.get('U', ''),  # Use 'U' as it comes from the database
                    log.get('f_list', ''),
                    log.get('x_input', ''),
                    log.get('x_plus', ''),
                    log.get('k1', ''),
                    log.get('k2', ''),
                    log.get('k3', ''),
                    log.get('ks1', ''),
                    log.get('ks2', ''),
                    log.get('ks3', ''),
                    log.get('ks4', ''),
                    log.get('ks5', ''),
                    log.get('f1', ''),
                    log.get('f2', ''),
                    log.get('f3', '')
                ), tags=(tag,))
                self.log_map[item_id] = log

            scrollbar_y = ttk.Scrollbar(history_window, orient="vertical", command=self.tree.yview)
            scrollbar_x = ttk.Scrollbar(history_window, orient="horizontal", command=self.tree.xview)
            self.tree.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)

            self.tree.pack(side="top", fill="both", expand=True, padx=8, pady=8)
            scrollbar_y.pack(side="right", fill="y")
            scrollbar_x.pack(side="bottom", fill="x")

            # Bind double-click to show log details
            self.tree.bind('<Double-1>', lambda event: self.show_log_detail(history_window))

            button_frame = ttk.Frame(history_window)
            button_frame.pack(fill="x", pady=5)
            ttk.Button(button_frame, text="üîÑ L√†m m·ªõi", command=lambda: [history_window.destroy(), self.show_history()]).pack(side="left", padx=5)
            ttk.Button(button_frame, text="üìã Xem chi ti·∫øt", command=lambda: self.show_log_detail(history_window)).pack(side="left", padx=5)
            ttk.Button(button_frame, text="üì§ Xu·∫•t CSV", command=lambda: self.export_history(logs)).pack(side="left", padx=5)

        except ImportError:
            messagebox.showerror("L·ªói", "Module pyodbc kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t b·∫±ng l·ªánh: pip install pyodbc")
        except Exception as e:
            logging.error(f"Error in show_history: {str(e)}")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠: {str(e)}")

    def show_log_detail(self, history_window):
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt b·∫£n ghi ƒë·ªÉ xem chi ti·∫øt")
            return
        
        selected_item = selection[0]
        log = self.log_map.get(selected_item)
        if not log:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu chi ti·∫øt cho b·∫£n ghi n√†y")
            return
        
        created_at_str = log['created_at'].strftime("%Y-%m-%d %H:%M:%S")
        
        detail_window = tk.Toplevel(self)
        detail_window.title(f"üìã Chi ti·∫øt - Th·ªùi gian: {created_at_str}")
        detail_window.geometry("450x600")
        detail_window.configure(bg="#f5f5f5")

        main_frame = ttk.Frame(detail_window)
        main_frame.pack(fill="both", expand=True, padx=8, pady=8)

        canvas = tk.Canvas(main_frame, bg="#f5f5f5")
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        frame = ttk.Frame(canvas)

        def get_text_height(content, default=4, max_height=10):
            if not content:
                return default
            lines = content.count('\n') + 1 if isinstance(content, str) else default
            return min(max(lines, default), max_height)

        ttk.Label(frame, text=f"‚è∞ Th·ªùi gian t·∫°o: {created_at_str}", font=("Arial", 11, "bold")).pack(anchor="w", pady=4)
        if 'schema_log_id' in log:
            ttk.Label(frame, text=f"üÜî Schema Log ID: {log['schema_log_id']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        ttk.Label(frame, text=f"üåå T·∫≠p U: {log['U'] or 'N/A'}", font=("Arial", 11)).pack(anchor="w", pady=4)

        ttk.Label(frame, text="üìã T·∫≠p F:", font=("Arial", 11, "bold")).pack(anchor="w", pady=4)
        txt_f = tk.Text(frame, height=get_text_height(log['f_list']), width=50, font=("Arial", 11), bg="#ffffff", relief="flat", borderwidth=1)
        txt_f.insert(tk.END, log['f_list'] or 'N/A')
        txt_f.config(state="disabled")
        txt_f.pack(fill="x", pady=4)

        if log.get('x_input'):
            ttk.Label(frame, text=f"‚û°Ô∏è X Input: {log['x_input']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        if log.get('x_plus'):
            ttk.Label(frame, text=f"üîç X+: {log['x_plus']}", font=("Arial", 11)).pack(anchor="w", pady=4)

        if log.get('k1'):
            ttk.Label(frame, text=f"üîë K1: {log['k1']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        if log.get('k2'):
            ttk.Label(frame, text=f"üîë K2: {log['k2']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        if log.get('k3'):
            ttk.Label(frame, text=f"üîë K3: {log['k3']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        if log.get('ks1'):
            ttk.Label(frame, text=f"üîë KS1: {log['ks1']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        if log.get('ks2'):
            ttk.Label(frame, text=f"üîë KS2: {log['ks2']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        if log.get('ks3'):
            ttk.Label(frame, text=f"üîë KS3: {log['ks3']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        if log.get('ks4'):
            ttk.Label(frame, text=f"üîë KS4: {log['ks4']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        if log.get('ks5'):
            ttk.Label(frame, text=f"üîë KS5: {log['ks5']}", font=("Arial", 11)).pack(anchor="w", pady=4)
        if log.get('ks6'):
            ttk.Label(frame, text=f"üîë KS6: {log['ks6']}", font=("Arial", 11)).pack(anchor="w", pady=4)

        if log.get('f1'):
            ttk.Label(frame, text="üìä F1:", font=("Arial", 11, "bold")).pack(anchor="w", pady=4)
            txt_f1 = tk.Text(frame, height=get_text_height(log['f1']), width=50, font=("Arial", 11), bg="#ffffff", relief="flat", borderwidth=1)
            txt_f1.insert(tk.END, log['f1'])
            txt_f1.config(state="disabled")
            txt_f1.pack(fill="x", pady=4)

        if log.get('f2'):
            ttk.Label(frame, text="üìä F2:", font=("Arial", 11, "bold")).pack(anchor="w", pady=4)
            txt_f2 = tk.Text(frame, height=get_text_height(log['f2']), width=50, font=("Arial", 11), bg="#ffffff", relief="flat", borderwidth=1)
            txt_f2.insert(tk.END, log['f2'])
            txt_f2.config(state="disabled")
            txt_f2.pack(fill="x", pady=4)

        if log.get('f3'):
            ttk.Label(frame, text="üìä F3:", font=("Arial", 11, "bold")).pack(anchor="w", pady=4)
            txt_f3 = tk.Text(frame, height=get_text_height(log['f3']), width=50, font=("Arial", 11), bg="#ffffff", relief="flat", borderwidth=1)
            txt_f3.insert(tk.END, log['f3'])
            txt_f3.config(state="disabled")
            txt_f3.pack(fill="x", pady=4)

        button_frame = ttk.Frame(frame)
        button_frame.pack(fill="x", pady=8)
        ttk.Button(button_frame, text="üóë X√≥a b·∫£n ghi", command=lambda: self.delete_log_and_close(log['created_at'], detail_window, history_window)).pack(side="left", padx=5)
        ttk.Button(button_frame, text="üîô ƒê√≥ng", command=detail_window.destroy).pack(side="left", padx=5)

        canvas.create_window((0, 0), window=frame, anchor="nw")
        frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        canvas.configure(yscrollcommand=scrollbar.set)

    def delete_log_and_close(self, created_at, detail_window, history_window):
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b·∫£n ghi n√†y?"):
            try:
                if delete_log(created_at):
                    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a b·∫£n ghi")
                    detail_window.destroy()
                    history_window.destroy()
                    self.show_history()
                else:
                    messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a b·∫£n ghi")
            except Exception as e:
                logging.error(f"Error deleting log: {str(e)}")
                messagebox.showerror("L·ªói", f"L·ªói khi x√≥a b·∫£n ghi: {str(e)}")

    def export_history(self, logs):
        try:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv")],
                title="L∆∞u t·ªáp CSV"
            )
            if not file_path:
                return

            # Include schema_log_id in fieldnames
            fieldnames = ["created_at", "schema_log_id", "u_set", "f_list", "x_input", "x_plus", "k1", "k2", "k3", "ks1", "ks2", "ks3", "ks4", "ks5", "ks6", "f1", "f2", "f3"]

            with open(file_path, 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.DictWriter(f, fieldnames=fieldnames, quoting=csv.QUOTE_MINIMAL)
                # Write header with descriptive names
                writer.writerow({
                    "created_at": "Th·ªùi gian t·∫°o",
                    "schema_log_id": "Schema Log ID",
                    "u_set": "T·∫≠p U",
                    "f_list": "T·∫≠p F",
                    "x_input": "X Input",
                    "x_plus": "X+",
                    "k1": "K1",
                    "k2": "K2",
                    "k3": "K3",
                    "ks1": "KS1",
                    "ks2": "KS2",
                    "ks3": "KS3",
                    "ks4": "KS4",
                    "ks5": "KS5",
                    "ks6": "KS6",
                    "f1": "F1",
                    "f2": "F2",
                    "f3": "F3"
                })
                for log in logs:
                    log_copy = log.copy()
                    # Format the timestamp
                    log_copy['created_at'] = log_copy['created_at'].strftime("%Y-%m-%d %H:%M:%S")
                    # Rename 'U' to 'u_set' to match fieldnames
                    if 'U' in log_copy:
                        log_copy['u_set'] = log_copy.pop('U')
                    # Replace None with empty string and ensure strings
                    for key in log_copy:
                        log_copy[key] = '' if log_copy[key] is None else str(log_copy[key])
                    writer.writerow(log_copy)

            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t l·ªãch s·ª≠ ra {file_path}")
            self.status_var.set("‚úÖ ƒê√£ xu·∫•t l·ªãch s·ª≠ ra CSV")
        except PermissionError:
            logging.error("L·ªói quy·ªÅn truy c·∫≠p: Kh√¥ng th·ªÉ ghi v√†o t·ªáp CSV")
            messagebox.showerror("L·ªói", "Kh√¥ng c√≥ quy·ªÅn ghi v√†o t·ªáp. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p ho·∫∑c ch·ªçn v·ªã tr√≠ kh√°c.")
        except Exception as e:
            logging.error(f"L·ªói khi xu·∫•t CSV: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói khi xu·∫•t CSV: {str(e)}")

    def test_db_connection(self):
        try:
            conn = get_connection()
            if conn:
                conn.close()
                messagebox.showinfo("K·∫øt n·ªëi th√†nh c√¥ng", "ƒê√£ k·∫øt n·ªëi ƒë∆∞·ª£c ƒë·∫øn SQL Server")
            else:
                messagebox.showerror("L·ªói k·∫øt n·ªëi", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn SQL Server")
        except ImportError:
            messagebox.showerror("L·ªói", "Module pyodbc kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t b·∫±ng l·ªánh: pip install pyodbc")
        except Exception as e:
            messagebox.showerror("L·ªói k·∫øt n·ªëi", f"L·ªói: {str(e)}")

    def reset_data(self):
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ nh·∫≠p?"):
            self.txtU.delete(0, tk.END)
            self.txtUDisplay.config(state="normal")
            self.txtUDisplay.delete(0, tk.END)
            self.txtUDisplay.config(state="readonly")
            self.u_set = set()
        
            self.txtF.delete(1.0, tk.END)
            self.f_list = []
        
            self.txtX.delete(0, tk.END)
            self.txtY.delete(0, tk.END)
        
            self.txtFindX.delete(0, tk.END)
            self.txtXPlus.config(state="normal")
            self.txtXPlus.delete(0, tk.END)
            self.txtXPlus.config(state="readonly")
        
            self.txtK1.config(state="normal")
            self.txtK1.delete(0, tk.END)
            self.txtK1.config(state="readonly")
        
            self.txtK2.config(state="normal")
            self.txtK2.delete(0, tk.END)
            self.txtK2.config(state="readonly")
        
            self.txtK3.config(state="normal")
            self.txtK3.delete(0, tk.END)
            self.txtK3.config(state="readonly")
        
            self.txtKS1.config(state="normal")
            self.txtKS1.delete(0, tk.END)
            self.txtKS1.config(state="readonly")

            self.txtKS2.config(state="normal")
            self.txtKS2.delete(0, tk.END)
            self.txtKS2.config(state="readonly")
        
            self.txtKS3.config(state="normal")
            self.txtKS3.delete(0, tk.END)
            self.txtKS3.config(state="readonly")

            self.txtKS4.config(state="normal")
            self.txtKS4.delete(0, tk.END)
            self.txtKS4.config(state="readonly")
        
            self.txtKS5.config(state="normal")
            self.txtKS5.delete(0, tk.END)
            self.txtKS5.config(state="readonly")
        
            self.txtKS6.config(state="normal")
            self.txtKS6.delete(0, tk.END)
            self.txtKS6.config(state="readonly")

            self.txtF1.delete(1.0, tk.END)
            self.txtF2.delete(1.0, tk.END)
            self.txtF3.delete(1.0, tk.END)
        
            self.status_var.set("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu")

    def show_help(self):
        help_text = """
        üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG PH·∫¶N M·ªÄM T√åM KH√ìA L∆Ø·ª¢C ƒê·ªí QUAN H·ªÜ
    
        1. üåå Nh·∫≠p t·∫≠p thu·ªôc t√≠nh v≈© tr·ª• U:
           - Nh·∫≠p c√°c k√Ω t·ª± ƒë·∫°i di·ªán cho thu·ªôc t√≠nh, v√≠ d·ª•: ABCDEF
       
        2. ‚ûï Th√™m ph·ª• thu·ªôc h√†m:
           - Nh·∫≠p X (v·∫ø tr√°i), v√≠ d·ª•: AB
           - Nh·∫≠p Y (v·∫ø ph·∫£i), v√≠ d·ª•: CD
           - Nh·∫•n "Th√™m ph·ª• thu·ªôc h√†m"
       
        3. üîç T√¨m X+:
           - Nh·∫≠p X c·∫ßn t√¨m bao ƒë√≥ng
           - Nh·∫•n "T√¨m X+"
       
        4. üîë T√¨m kh√≥a:
           - Nh·∫•n "T√¨m K1", "T√¨m K2", "T√¨m K3", "T√¨m KS1", "T√¨m KS2", "T√¨m KS3", "T√¨m KS4", "T√¨m KS5", "T√¨m KS6" ƒë·ªÉ t√¨m kh√≥a theo t·ª´ng thu·∫≠t to√°n
           - KS1 tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c kh√≥a ·ª©ng vi√™n
           - KS2 tr·∫£ v·ªÅ c√°c kh√≥a ·ª©ng vi√™n c√≥ s·ªë thu·ªôc t√≠nh t·ªëi thi·ªÉu v√† √≠t ph·ª• thu·ªôc
           - KS3 ∆∞u ti√™n c√°c kh√≥a ch·ª©a nhi·ªÅu thu·ªôc t√≠nh ·ªü v·∫ø tr√°i v√† c√¢n b·∫±ng
           - KS4 t·ªëi ∆∞u h√≥a ƒë·ªô bao ph·ªß c·ªßa t·∫≠p ph·ª• thu·ªôc h√†m
           - KS5 d·ª±a tr√™n ph√¢n t√≠ch ƒë·ªì th·ªã ph·ª• thu·ªôc v·ªõi nƒÉng l∆∞·ª£ng th·∫•p
           - KS6 k·∫øt h·ª£p bao ph·ªß v√† nƒÉng l∆∞·ª£ng ƒë·ªÉ t·ªëi ∆∞u h√≥a
           - C√°c kh√≥a ƒë∆∞·ª£c ph√¢n t√°ch b·∫±ng d·∫•u ch·∫•m ph·∫©y
       
        5. üìä T√¨m t·∫≠p ph·ª• thu·ªôc h√†m t·ªëi thi·ªÉu:
           - Nh·∫•n "T√¨m F1", "T√¨m F2", "T√¨m F3" ƒë·ªÉ t√¨m t·∫≠p ph·ª• thu·ªôc h√†m t·ªëi thi·ªÉu
       
        6. üíæ L∆∞u k·∫øt qu·∫£:
           - Nh·∫•n "L∆∞u v√†o SQL Server" ƒë·ªÉ l∆∞u k·∫øt qu·∫£ v√†o c∆° s·ªü d·ªØ li·ªáu
       
        7. üìú Xem l·ªãch s·ª≠:
           - V√†o menu "C√¥ng c·ª•" > "Xem l·ªãch s·ª≠" ƒë·ªÉ xem c√°c k·∫øt qu·∫£ ƒë√£ l∆∞u
           - Nh·∫•n v√†o m·ªôt b·∫£n ghi ƒë·ªÉ xem chi ti·∫øt
           - Nh·∫•n "Xu·∫•t CSV" ƒë·ªÉ l∆∞u l·ªãch s·ª≠ ra file CSV
        """
    
        help_window = tk.Toplevel(self)
        help_window.title("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        help_window.geometry("650x550")
        help_window.configure(bg="#f5f5f5")
    
        txt_help = tk.Text(help_window, font=("Arial", 11), wrap="word", bg="#ffffff", relief="flat", borderwidth=1)
        txt_help.pack(fill="both", expand=True, padx=8, pady=8)
        txt_help.insert(tk.END, help_text)
        txt_help.config(state="disabled")
    
        scrollbar = ttk.Scrollbar(txt_help, command=txt_help.yview)
        txt_help.config(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")

    def show_about(self):
        about_text = """
        ‚Ñπ ·ª®NG D·ª§NG T√åM KH√ìA L∆Ø·ª¢C ƒê·ªí QUAN H·ªÜ
    
        Ch·ª©c nƒÉng ch√≠nh:
        - üîç T√¨m bao ƒë√≥ng c·ªßa t·∫≠p thu·ªôc t√≠nh
        - üîë T√¨m kh√≥a c·ªßa l∆∞·ª£c ƒë·ªì quan h·ªá
        - üìä T√¨m t·∫≠p ph·ª• thu·ªôc h√†m t·ªëi thi·ªÉu
        - üíæ L∆∞u v√† xem l·ªãch s·ª≠ c√°c k·∫øt qu·∫£
    
        ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng minh h·ªça cho c√°c thu·∫≠t to√°n c∆° s·ªü d·ªØ li·ªáu.
        """
    
        messagebox.showinfo("‚Ñπ Gi·ªõi thi·ªáu", about_text)

if __name__ == "__main__":
    logging.basicConfig(filename='app.log', level=logging.DEBUG, 
                        format='%(asctime)s - %(levelname)s - %(message)s')
    app = KeyFindingApp()
    app.mainloop()
